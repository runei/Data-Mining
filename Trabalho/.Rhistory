timeTablePolice
# Split interval for data
splitVal <- 0.7
# Extract samples
set.seed(1234) # for reproduction
sample.tr <-sample(1:nrow(policeDataTest),as.integer(splitVal*nrow(policeDataTest)))
tr <- policeDataTest[sample.tr, ] #Split into two sets
ts <- policeDataTest[-sample.tr,]
model_lm <- lm(n_offenses ~., tr)
model_lm_final <- step(model_lm)
preds_lm <- predict(model_lm_final, ts)
err_svm
m <- boosting(n_offenses ~ ., tr)
library(adabag)
m <- boosting(n_offenses ~ ., tr)
nn3 <- kNN(n_offenses ~ .,tr,ts,k=3,norm=TRUE)
m <- boosting(n_offenses ~ ., tr)
ps <- predict(m,ts)
model_lda <- lda(n_offenses ~., tr)
preds_lda <- predict(model_lda, ts)
set.seed(1234) # for reproduction
sample.tr <-sample(1:nrow(policeDataTest),as.integer(splitVal*nrow(policeDataTest)))
tr <- policeDataTest[sample.tr, ] #Split into two sets
ts <- policeDataTest[-sample.tr,]
Beats <- unique(policeDataTest$Beat)
updateT <- function(ts, BeatsTS) {
result <- ts
for (beat in BeatsTS)  {
if (nrow(ts[ts$Beat == beat,]) == 0) {
result <- rbind(result, policeDataTest[policeDataTest$Beat == beat,][1,])
}
}
return(result)
}
tr <- updateT(tr, Beats)
ts <- updateT(ts, Beats)
library(earth)
model_mars <- earth(n_offenses ~., tr)
preds_mars <- predict(model_mars, ts)
err_mars <- regr.eval(ts$n_offenses, preds_mars, train.y=tr$n_offenses)
library(adabag)
m <- boosting(n_offenses ~ ., tr)
m <- boosting(n_offenses ~ ., tr,boos = TRUE, mfinal = 10, control = (minsplit = 0)))
m <- boosting(n_offenses ~ ., tr,boos = TRUE, mfinal = 10, control = (minsplit = 0))
m <- boosting(n_offenses ~ ., tr,boos = TRUE, mfinal = 10, control = (minsplit = 1))
ts[0,]
err_lm
err_tree
err_nn
err_mars
policeDataTest<-group_by(policeDataTest, Beat, wday, shift)%>%summarise(n_offenses=sum(n_offenses))
policeDataTest<-group_by(policeData, Beat, wday, Hour)%>%summarise(n_offenses=sum(n_offenses))
policeDataTest$shift<-NA
policeDataTest$shift[policeDataTest$Hour>=8 & policeDataTest$Hour <12]<-"shift1"
policeDataTest$shift[policeDataTest$Hour>=12 & policeDataTest$Hour <19]<-"shift2"
policeDataTest$shift[policeDataTest$Hour>=19 & policeDataTest$Hour <24]<-"shift3"
policeDataTest$shift[policeDataTest$Hour>=0 & policeDataTest$Hour <8]<-"shift3"
# Swapping the last two columns and cancel the information about the Hour
policeDataTest<-policeDataTest[c("Beat","wday", "shift", "n_offenses")]
#policeDataTest$Beat<-factor(policeDataTest$Beat)
#policeDataTest$shift<-factor(policeDataTest$shift)
policeDataTest<-group_by(policeDataTest, Beat, wday, shift)%>%summarise(n_offenses=sum(n_offenses))
#policeDataCut <- factor(policeDataCut)
# Split interval for data
splitVal <- 0.7
# Extract samples
set.seed(1234) # for reproduction
sample.tr <-sample(1:nrow(policeDataTest),as.integer(splitVal*nrow(policeDataTest)))
tr <- policeDataTest[sample.tr, ] #Split into two sets
ts <- policeDataTest[-sample.tr,]
Beats <- unique(policeDataTest$Beat)
updateT <- function(ts, BeatsTS) {
result <- ts
for (beat in BeatsTS)  {
if (nrow(ts[ts$Beat == beat,]) == 0) {
result <- rbind(result, policeDataTest[policeDataTest$Beat == beat,][1,])
}
}
return(result)
}
tr <- updateT(tr, Beats)
ts <- updateT(ts, Beats)
#Linear Discriminant
library(MASS)
library(DMwR)
model_lda <- lda(n_offenses ~., tr)
preds_lda <- predict(model_lda, ts)
mtrx <- table(preds_lda$class,ts$n_offenses)
err <- 1-sum(diag(mtrx))/sum(mtrx)
#Multiple Linear Regression
model_lm <- lm(n_offenses ~., tr)
model_lm_final <- step(model_lm)
preds_lm <- predict(model_lm_final, ts)
err_lm <- regr.eval(ts$n_offenses, preds_lm, train.y=tr$n_offenses)
err_lm
policeDataTest$shift[policeDataTest$Hour>=8 & policeDataTest$Hour <12]<-"shift1"
policeDataTest$shift[policeDataTest$Hour>=12 & policeDataTest$Hour <19]<-"shift2"
policeDataTest$shift[policeDataTest$Hour>=19 & policeDataTest$Hour <24]<-"shift3"
policeDataTest$shift[policeDataTest$Hour>=0 & policeDataTest$Hour <8]<-"shift3"
# Swapping the last two columns and cancel the information about the Hour
policeDataTest<-policeDataTest[c("Beat","wday", "shift", "n_offenses")]
policeDataTest$Beat<-factor(policeDataTest$Beat)
policeDataTest$shift<-factor(policeDataTest$shift)
#policeDataTest<-group_by(policeDataTest, Beat, wday, shift)%>%summarise(n_offenses=sum(n_offenses))
policeDataTest<-group_by(policeData, Beat, wday, Hour)%>%summarise(n_offenses=sum(n_offenses))
policeDataTest$shift<-NA
policeDataTest$shift[policeDataTest$Hour>=8 & policeDataTest$Hour <12]<-"shift1"
policeDataTest$shift[policeDataTest$Hour>=12 & policeDataTest$Hour <19]<-"shift2"
policeDataTest$shift[policeDataTest$Hour>=19 & policeDataTest$Hour <24]<-"shift3"
policeDataTest$shift[policeDataTest$Hour>=0 & policeDataTest$Hour <8]<-"shift3"
# Swapping the last two columns and cancel the information about the Hour
policeDataTest<-policeDataTest[c("Beat","wday", "shift", "n_offenses")]
policeDataTest$Beat<-factor(policeDataTest$Beat)
policeDataTest$shift<-factor(policeDataTest$shift)
#policeDataTest<-group_by(policeDataTest, Beat, wday, shift)%>%summarise(n_offenses=sum(n_offenses))
#policeDataCut <- factor(policeDataCut)
# Split interval for data
splitVal <- 0.7
# Extract samples
set.seed(1234) # for reproduction
sample.tr <-sample(1:nrow(policeDataTest),as.integer(splitVal*nrow(policeDataTest)))
tr <- policeDataTest[sample.tr, ] #Split into two sets
ts <- policeDataTest[-sample.tr,]
Beats <- unique(policeDataTest$Beat)
updateT <- function(ts, BeatsTS) {
result <- ts
for (beat in BeatsTS)  {
if (nrow(ts[ts$Beat == beat,]) == 0) {
result <- rbind(result, policeDataTest[policeDataTest$Beat == beat,][1,])
}
}
return(result)
}
tr <- updateT(tr, Beats)
ts <- updateT(ts, Beats)
#Linear Discriminant
library(MASS)
library(DMwR)
model_lda <- lda(n_offenses ~., tr)
preds_lda <- predict(model_lda, ts)
mtrx <- table(preds_lda$class,ts$n_offenses)
err <- 1-sum(diag(mtrx))/sum(mtrx)
#Multiple Linear Regression
model_lm <- lm(n_offenses ~., tr)
model_lm_final <- step(model_lm)
preds_lm <- predict(model_lm_final, ts)
err_lm <- regr.eval(ts$n_offenses, preds_lm, train.y=tr$n_offenses)
err_lm
policeData[policeData$Beat == "10H10" & policeData$wday = "Sun"]
policeData[policeData$Beat == "10H10" & policeData$wday == "Sun"]
policeData[policeData$Beat == "10H10" & policeData$wday == "Sun",]
policeDataTest<-group_by(policeData, Beat, wday, Hour)%>%summarise(n_offenses=mean(n_offenses))
policeDataTest$shift<-NA
policeDataTest$shift[policeDataTest$Hour>=8 & policeDataTest$Hour <12]<-"shift1"
policeDataTest$shift[policeDataTest$Hour>=12 & policeDataTest$Hour <19]<-"shift2"
policeDataTest$shift[policeDataTest$Hour>=19 & policeDataTest$Hour <24]<-"shift3"
policeDataTest$shift[policeDataTest$Hour>=0 & policeDataTest$Hour <8]<-"shift3"
# Swapping the last two columns and cancel the information about the Hour
policeDataTest<-policeDataTest[c("Beat","wday", "shift", "n_offenses")]
policeDataTest$Beat<-factor(policeDataTest$Beat)
policeDataTest$shift<-factor(policeDataTest$shift)
policeDataTest<-group_by(policeDataTest, Beat, wday, shift)%>%summarise(n_offenses=mean(n_offenses))
policeDataTest<-group_by(policeData, Beat, wday, Hour)%>%summarise(n_offenses=mean(n_offenses))
policeDataTest$shift<-NA
policeDataTest$shift[policeDataTest$Hour>=8 & policeDataTest$Hour <12]<-"shift1"
policeDataTest$shift[policeDataTest$Hour>=12 & policeDataTest$Hour <19]<-"shift2"
policeDataTest$shift[policeDataTest$Hour>=19 & policeDataTest$Hour <24]<-"shift3"
policeDataTest$shift[policeDataTest$Hour>=0 & policeDataTest$Hour <8]<-"shift3"
# Swapping the last two columns and cancel the information about the Hour
policeDataTest<-policeDataTest[c("Beat","wday", "shift", "n_offenses")]
policeDataTest$Beat<-factor(policeDataTest$Beat)
policeDataTest$shift<-factor(policeDataTest$shift)
policeDataTest<-group_by(policeDataTest, Beat, wday, shift)%>%summarise(n_offenses=mean(n_offenses))
#policeDataCut <- factor(policeDataCut)
# Split interval for data
splitVal <- 0.7
# Extract samples
set.seed(1234) # for reproduction
sample.tr <-sample(1:nrow(policeDataTest),as.integer(splitVal*nrow(policeDataTest)))
tr <- policeDataTest[sample.tr, ] #Split into two sets
ts <- policeDataTest[-sample.tr,]
Beats <- unique(policeDataTest$Beat)
updateT <- function(ts, BeatsTS) {
result <- ts
for (beat in BeatsTS)  {
if (nrow(ts[ts$Beat == beat,]) == 0) {
result <- rbind(result, policeDataTest[policeDataTest$Beat == beat,][1,])
}
}
return(result)
}
tr <- updateT(tr, Beats)
ts <- updateT(ts, Beats)
model_lm <- lm(n_offenses ~., tr)
model_lm_final <- step(model_lm)
preds_lm <- predict(model_lm_final, ts)
err_lm <- regr.eval(ts$n_offenses, preds_lm, train.y=tr$n_offenses)
err_lm
library(MASS)
library(DMwR)
model_lda <- lda(n_offenses ~., tr)
preds_lda <- predict(model_lda, ts)
mtrx <- table(preds_lda$class,ts$n_offenses)
err <- 1-sum(diag(mtrx))/sum(mtrx)
#Multiple Linear Regression
model_lm <- lm(n_offenses ~., tr)
model_lm_final <- step(model_lm)
preds_lm <- predict(model_lm_final, ts)
err_lm <- regr.eval(ts$n_offenses, preds_lm, train.y=tr$n_offenses)
#Trees
library(rpart.plot)
model_tree <- rpartXse(n_offenses ~ .,tr)
preds_tree <- predict(model_tree,ts)
err_tree <- regr.eval(ts$n_offenses, preds_tree, train.y=tr$n_offenses)
#SVM
library(e1071)
model_svm <- svm(n_offenses ~., tr)
preds_svm <- predict(model_svm,ts)
err_svm <- regr.eval(ts$n_offenses, preds_svm, train.y=tr$n_offenses)
#Neural Networks
library(nnet)
model_nn <- nnet(n_offenses ~., tr, size=5, decay=0.1, maxit=1000)
preds_nn <- predict(model_nn,ts)
err_nn <- regr.eval(ts$n_offenses, preds_nn, train.y=tr$n_offenses)
#Mars
library(earth)
model_mars <- earth(n_offenses ~., tr)
preds_mars <- predict(model_mars, ts)
err_mars <- regr.eval(ts$n_offenses, preds_mars, train.y=tr$n_offenses)
library(adabag)
m <- boosting(n_offenses ~ ., tr,boos = TRUE, mfinal = 10, control = (minsplit = 1))
ps <- predict(m,ts)
timeTablePolice<-matrix(nrow=116*7*3, ncol=4)
beats=unique(policeDataTest$Beat)
days=unique(policeDataTest$wday)
shift=unique(policeDataTest$shift)
predi<-ts[1,]
predicted=0
c=0
for(i in 1:2436){
timeTablePolice[i,1]= as.character(beats[ceiling(i/21)])
predi$Beat=beats[ceiling(i/21)]
c=ceiling(i/3)%%7
if(c==0){timeTablePolice[i,2]=as.character(days[7])
predi$wday=days[7]
}
else{
timeTablePolice[i,2]=as.character(days[c])#ceiling(i/7)%%7#as.character(days[ceiling(i%%7])}
predi$wday=days[c]
}
if(i%%3==0){
timeTablePolice[i,3]=as.character(shift[3])
predi$shift=shift[3]
}else{
timeTablePolice[i,3]=as.character(shift[i%%3])
predi$shift=shift[i%%3]
}
predi$n_offenses=NA
predicted<-predict(model_tree,predi)
timeTablePolice[i,4]=predicted
}
err_lm
err_mars
err_nn
err_svm
err_tree
for(i in 1:2436){
timeTablePolice[i,1]= as.character(beats[ceiling(i/21)])
predi$Beat=beats[ceiling(i/21)]
c=ceiling(i/3)%%7
if(c==0){timeTablePolice[i,2]=as.character(days[7])
predi$wday=days[7]
}
else{
timeTablePolice[i,2]=as.character(days[c])#ceiling(i/7)%%7#as.character(days[ceiling(i%%7])}
predi$wday=days[c]
}
if(i%%3==0){
timeTablePolice[i,3]=as.character(shift[3])
predi$shift=shift[3]
}else{
timeTablePolice[i,3]=as.character(shift[i%%3])
predi$shift=shift[i%%3]
}
predi$n_offenses=NA
predicted<-predict(model_nn,predi)
timeTablePolice[i,4]=predicted
}
timeTablePolice
timeTablePolice<-matrix(nrow=116*7*3, ncol=4)
beats=unique(policeDataTest$Beat)
days=unique(policeDataTest$wday)
shift=unique(policeDataTest$shift)
predi<-ts[1,]
predicted=0
c=0
for(i in 1:2436){
timeTablePolice[i,1]= as.character(beats[ceiling(i/21)])
predi$Beat=beats[ceiling(i/21)]
c=ceiling(i/3)%%7
if(c==0){timeTablePolice[i,2]=as.character(days[7])
predi$wday=days[7]
}
else{
timeTablePolice[i,2]=as.character(days[c])#ceiling(i/7)%%7#as.character(days[ceiling(i%%7])}
predi$wday=days[c]
}
if(i%%3==0){
timeTablePolice[i,3]=as.character(shift[3])
predi$shift=shift[3]
}else{
timeTablePolice[i,3]=as.character(shift[i%%3])
predi$shift=shift[i%%3]
}
predi$n_offenses=NA
predicted<-predict(model_tree,predi)
timeTablePolice[i,4]=predicted
}
timeTablePolice
policeData<-mutate(policeData,day=day(Date),wday=wday(Date,label=TRUE))
#Cutting the unuseful informations:
policeDataTest<-group_by(policeData, Beat, wday, Hour)%>%summarise(n_offenses=mean(n_offenses))
policeDataTest$shift<-NA
policeDataTest$shift[policeDataTest$Hour>=8 & policeDataTest$Hour <12]<-"shift1"
policeDataTest$shift[policeDataTest$Hour>=12 & policeDataTest$Hour <19]<-"shift2"
policeDataTest$shift[policeDataTest$Hour>=19 & policeDataTest$Hour <24]<-"shift3"
policeDataTest$shift[policeDataTest$Hour>=0 & policeDataTest$Hour <8]<-"shift3"
# Swapping the last two columns and cancel the information about the Hour
policeDataTest<-policeDataTest[c("Beat","wday", "shift", "n_offenses")]
policeDataTest$Beat<-factor(policeDataTest$Beat)
policeDataTest$shift<-factor(policeDataTest$shift)
policeDataTest<-group_by(policeDataTest, Beat, wday, shift)%>%summarise(n_offenses=mean(n_offenses))
#policeDataCut <- factor(policeDataCut)
# Split interval for data
splitVal <- 0.7
# Extract samples
set.seed(1234) # for reproduction
sample.tr <-sample(1:nrow(policeDataTest),as.integer(splitVal*nrow(policeDataTest)))
tr <- policeDataTest[sample.tr, ] #Split into two sets
ts <- policeDataTest[-sample.tr,]
Beats <- unique(policeDataTest$Beat)
updateT <- function(ts, BeatsTS) {
result <- ts
for (beat in BeatsTS)  {
if (nrow(ts[ts$Beat == beat,]) == 0) {
result <- rbind(result, policeDataTest[policeDataTest$Beat == beat,][1,])
}
}
return(result)
}
tr <- updateT(tr, Beats)
ts <- updateT(ts, Beats)
#Linear Discriminant
library(MASS)
library(DMwR)
model_lda <- lda(n_offenses ~., tr)
preds_lda <- predict(model_lda, ts)
mtrx <- table(preds_lda$class,ts$n_offenses)
err <- 1-sum(diag(mtrx))/sum(mtrx)
#Multiple Linear Regression
model_lm <- lm(n_offenses ~., tr)
model_lm_final <- step(model_lm)
preds_lm <- predict(model_lm_final, ts)
err_lm <- regr.eval(ts$n_offenses, preds_lm, train.y=tr$n_offenses)
#Trees
library(rpart.plot)
model_tree <- rpartXse(n_offenses ~ .,tr)
preds_tree <- predict(model_tree,ts)
err_tree <- regr.eval(ts$n_offenses, preds_tree, train.y=tr$n_offenses)
#SVM
library(e1071)
model_svm <- svm(n_offenses ~., tr)
preds_svm <- predict(model_svm,ts)
err_svm <- regr.eval(ts$n_offenses, preds_svm, train.y=tr$n_offenses)
#Neural Networks
library(nnet)
model_nn <- nnet(n_offenses ~., tr, size=5, decay=0.1, maxit=1000)
preds_nn <- predict(model_nn,ts)
err_nn <- regr.eval(ts$n_offenses, preds_nn, train.y=tr$n_offenses)
#Mars
library(earth)
model_mars <- earth(n_offenses ~., tr)
preds_mars <- predict(model_mars, ts)
err_mars <- regr.eval(ts$n_offenses, preds_mars, train.y=tr$n_offenses)
preds_lm
#SVM
library(e1071)
model_svm <- svm(n_offenses ~., tr)
preds_svm <- predict(model_svm,ts)
err_svm <- regr.eval(ts$n_offenses, preds_svm, train.y=tr$n_offenses)
#Neural Networks
library(nnet)
model_nn <- nnet(n_offenses ~., tr, size=5, decay=0.1, maxit=1000)
preds_nn <- predict(model_nn,ts)
err_nn <- regr.eval(ts$n_offenses, preds_nn, train.y=tr$n_offenses)
#Mars
library(earth)
model_mars <- earth(n_offenses ~., tr)
preds_mars <- predict(model_mars, ts)
err_mars <- regr.eval(ts$n_offenses, preds_mars, train.y=tr$n_offenses)
timeTablePolice<-matrix(nrow=116*7*3, ncol=4)
beats=unique(policeDataTest$Beat)
days=unique(policeDataTest$wday)
shift=unique(policeDataTest$shift)
predi<-ts[1,]
predicted=0
c=0
for(i in 1:2436){
timeTablePolice[i,1]= as.character(beats[ceiling(i/21)])
predi$Beat=beats[ceiling(i/21)]
c=ceiling(i/3)%%7
if(c==0){timeTablePolice[i,2]=as.character(days[7])
predi$wday=days[7]
}
else{
timeTablePolice[i,2]=as.character(days[c])#ceiling(i/7)%%7#as.character(days[ceiling(i%%7])}
predi$wday=days[c]
}
if(i%%3==0){
timeTablePolice[i,3]=as.character(shift[3])
predi$shift=shift[3]
}else{
timeTablePolice[i,3]=as.character(shift[i%%3])
predi$shift=shift[i%%3]
}
predi$n_offenses=NA
predicted<-predict(model_tree,predi)
timeTablePolice[i,4]=predicted
}
timeTablePolice
for(i in 1:2436){
timeTablePolice[i,1]= as.character(beats[ceiling(i/21)])
predi$Beat=beats[ceiling(i/21)]
c=ceiling(i/3)%%7
if(c==0){timeTablePolice[i,2]=as.character(days[7])
predi$wday=days[7]
}
else{
timeTablePolice[i,2]=as.character(days[c])#ceiling(i/7)%%7#as.character(days[ceiling(i%%7])}
predi$wday=days[c]
}
if(i%%3==0){
timeTablePolice[i,3]=as.character(shift[3])
predi$shift=shift[3]
}else{
timeTablePolice[i,3]=as.character(shift[i%%3])
predi$shift=shift[i%%3]
}
predi$n_offenses=NA
predicted<-predict(model_nn,predi)
timeTablePolice[i,4]=predicted
}
timeTablePolice
plot(ts$n_offenses, preds_nn)
err_nn
model_lm <- lm(n_offenses ~., tr)
model_lm_final <- step(model_lm)
preds_lm <- predict(model_lm_final, ts)
err_lm <- regr.eval(ts$n_offenses, preds_lm, train.y=tr$n_offenses)
#Trees
library(rpart.plot)
model_tree <- rpartXse(n_offenses ~ .,tr)
preds_tree <- predict(model_tree,ts)
err_tree <- regr.eval(ts$n_offenses, preds_tree, train.y=tr$n_offenses)
#SVM
library(e1071)
model_svm <- svm(n_offenses ~., tr)
preds_svm <- predict(model_svm,ts)
err_svm <- regr.eval(ts$n_offenses, preds_svm, train.y=tr$n_offenses)
#Neural Networks
library(nnet)
model_nn <- nnet(n_offenses ~., tr, size=5, decay=0.1, maxit=1000)
preds_nn <- predict(model_nn,ts)
err_nn <- regr.eval(ts$n_offenses, preds_nn, train.y=tr$n_offenses)
#Mars
library(earth)
model_mars <- earth(n_offenses ~., tr)
preds_mars <- predict(model_mars, ts)
err_mars <- regr.eval(ts$n_offenses, preds_mars, train.y=tr$n_offenses)
err_lm
err_mars
err_nn
err_svm
- adding the information of the day,week day, month and year
policeData<-mutate(policeData,day=day(Date),wday=wday(Date,label=TRUE))
policeData
model_lda <- lda(n_offenses ~., tr)
preds_lda <- predict(model_lda, ts)
mtrx <- table(preds_lda$class,ts$n_offenses)
err <- 1-sum(diag(mtrx))/sum(mtrx)
err
source('~/Documents/Data Mining/Trabalho/work1.R')
library(rpart.plot)
model_tree <- rpartXse(n_offenses ~ .,tr)
preds_tree <- predict(model_tree,ts)
err_tree <- regr.eval(ts$n_offenses, preds_tree, train.y=tr$n_offenses)
library(rpart.plot)
library(e1071)
library(nnet)
library(earth)
policeData <- read_excel("crime.xls", sheet=1, col_names = TRUE, col_types = NULL, na = "-")
timeTablePolice
tr
summary(timeTablePolice)
model_nn <- nnet(n_offenses ~., tr, size=5, decay=0.1, maxit=1000)
data.frame(timeTablePolice)
timeTablePolice
,,
timeTablePolice[20,]
timeTablePolice[50,]
View(timeTablePolice)
View(timeTablePolice)
